(function(){

function findAncestor() {
  var source = this.get('source'),
      parent = this.get('parent'),
      ancestor = _.isFolder(source) ? parent : this;

  while( !ancestor.get('isRoot') && !_.isFolder(ancestor.get('source'))) {
    ancestor =  ancestor.get('parent');
  }
  return ancestor !== this ? ancestor : null
}

function importImage(){
  var document = KT.Document(),
      data = this.get('data'),
      id = this.get('id'),
      folder = new Folder(data.path),
      files = folder.getFiles(),
      image,
      ancestor = this;

  if(files.length <= 0) return;

  this.set('source', KT.Document.import(files[0]));
  source = this.get('source');
  source.name = this.get('id');
  ancestor = findAncestor.call(this);
  ancestor && KT.Layers.setParent(ancestor.get('source'), source)
}


function importSequence(){
  var document = KT.Document();
    var data = this.get('data'),
        folder = new Folder(data.path),
        files = folder.getFiles(),
        timing = data.timing.frames,
        labels = data.timing.labels,
        tLen = timing.length, 
        fLen = files.length,
        frameCount = 0;
        lastFile,
        numFiles,
        t = 0,
        image,
        file,
        frame,
        frames,,
        frameSet,
        isFrameSet,
        time,
        name, 
        ancestor = this,
        self = this;

  if(files.length <= 0) return;
  this.set('source', document.layerSets.add());
  this.get('source').name = this.get('id');
  this.set('frames', []);
  frames = this.get('frames')
  source = this.get('source')
  ancestor = findAncestor.call(this);
  ancestor && KT.Layers.setParent(ancestor.get('source'), source)
  if(this.get('id') === 'M') $.bp()
  for(; t < tLen; t++) {
    time = timing[t];
    label = labels[t];
    numFiles = t < tLen ? timing[t +1] - time : fLen - time;
    isFrameSet = numFiles > 1;
    lastFile = isFrameSet ? time + numFiles : time + 1;
    frameSet = [];
    folder = isFrameSet ? document.layerSets.add() : source;
    folder.name = isFrameSet ? label : folder.name;
    isFrameSet && KT.Layers.setParent(source, folder);
    frameCount = 0;
    for(; time < lastFile; time++) {
      file = files[time] || files[0] ;
      frame = KT.Document.import(file);
      frame.name = isFrameSet ? time : label;
      KT.Layers.setParent(folder, frame);
      frameSet.push(frame);
    }

    frames.push(frameSet);
  }
}



function importAssets() {};
importAssets.default = function(){
  var document = KT.Document(),
      parent = this.get('parent'),
      data = this.get('data'),
      self = this,
      parentSource;
  if(!data.path) {
    var parent;
    if(this.get('isDataLayer') === true) return;
    this.set('source', document.layerSets.add());
    this.get('source').name = this.get('id');
    
    if(parent && parent.get('source') && _.isFolder(parent.get('source'))) {
      KT.Layers.setParent(parent.get('source'), this.get('source'))
    }

  } else {
    if(data.timing && data.timing.frames.length > 1) {
      importSequence.call(this)
    } else {
      importImage.call(this)
    }
  }
}


KT.Algorithm.register('PS: Import Assets', importAssets);

})();
